name: Website and Price Monitoring

on:
    push:
        branches: ["main", "feat/page_monitor"] # Test on pushes to these branches
    pull_request:
        branches: ["main"] # Test on PRs to main
    schedule:
        # Run price tracker twice daily (9 AM and 6 PM UTC)
        - cron: "0 9,18 * * *"
        # Run website monitor twice daily (9 AM and 6 PM UTC)
        - cron: "0 9,18 * * *"
    workflow_dispatch:
        inputs:
            project:
                description: "Which project to run"
                required: true
                default: "both"
                type: choice
                options:
                    - both
                    - price-tracker
                    - website-monitor

jobs:
    price-tracker:
        if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'schedule' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && (github.event.inputs.project == 'both' || github.event.inputs.project == 'price-tracker'))
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.12"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Debug secrets
              run: |
                  echo "Checking webhook configuration..."
                  if [ -n "$DISCORD_WEBHOOK" ]; then
                    echo "✅ DISCORD_WEBHOOK is set"
                  elif [ -n "$WEBHOOK_URL" ]; then
                    echo "✅ WEBHOOK_URL is set (fallback)"
                  else
                    echo "❌ No webhook secrets found"
                    echo "Available secrets should include: DISCORD_WEBHOOK or WEBHOOK_URL"
                    exit 1
                  fi
              env:
                  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
                  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

            - name: Run price tracker
              env:
                  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
                  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
              run: |
                  # Use DISCORD_WEBHOOK if available, otherwise fall back to WEBHOOK_URL
                  export DISCORD_WEBHOOK="${DISCORD_WEBHOOK:-$WEBHOOK_URL}"
                  cd projects/price-tracker
                  python reader.py

    website-monitor:
        if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'schedule' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && (github.event.inputs.project == 'both' || github.event.inputs.project == 'website-monitor'))
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.12"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  playwright install chromium

            - name: Debug secrets
              run: |
                  echo "Checking webhook configuration..."
                  if [ -n "$DISCORD_WEBHOOK" ]; then
                    echo "✅ DISCORD_WEBHOOK is set"
                  elif [ -n "$WEBHOOK_URL" ]; then
                    echo "✅ WEBHOOK_URL is set (fallback)"
                  else
                    echo "❌ No webhook secrets found"
                    echo "Available secrets should include: DISCORD_WEBHOOK or WEBHOOK_URL"
                    exit 1
                  fi
              env:
                  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
                  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

            - name: Run website monitor
              env:
                  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK || secrets.WEBHOOK_URL }}
              run: |
                  cd projects/website-monitor
                  python monitor.py

            - name: Commit monitoring state
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action Bot"
                  git add projects/website-monitor/screenshots/ projects/website-monitor/data/ || true
                  if ! git diff --quiet HEAD; then
                    git commit -m "chore: update monitoring baselines [automated]" || true
                    git push || true
                  fi

            - name: Check for notifications and upload relevant artifacts
              id: check_notifications
              run: |
                  cd projects/website-monitor/screenshots

                  # Check if any notification flags exist
                  if ls *.flag 1> /dev/null 2>&1; then
                    echo "Notifications were sent, preparing artifacts..."
                    
                    # Create a directory for notification artifacts
                    mkdir -p ../notification-artifacts
                    
                    # Process each notification flag
                    for flag_file in *.flag; do
                      website_name=$(basename "$flag_file" _notification_sent.flag)
                      echo "Processing notification for: $website_name"
                      
                      # Read the flag file to get the image that was sent
                      image_path=$(grep "Image used:" "$flag_file" | cut -d' ' -f3-)
                      image_name=$(basename "$image_path")
                      
                      # Copy the notification image to artifacts directory
                      if [ -f "$image_name" ]; then
                        echo "Copying $image_name to artifacts..."
                        cp "$image_name" "../notification-artifacts/"
                      else
                        echo "Warning: Image $image_name not found"
                      fi
                      
                      # Also copy the flag file for reference
                      cp "$flag_file" "../notification-artifacts/"
                    done
                    echo "upload_artifacts=true" >> $GITHUB_OUTPUT
                  else
                    echo "No notifications were sent, skipping artifact upload"
                    echo "upload_artifacts=false" >> $GITHUB_OUTPUT
                  fi

            - name: Upload notification artifacts
              if: steps.check_notifications.outputs.upload_artifacts == 'true'
              uses: actions/upload-artifact@v4
              with:
                  name: website-notifications
                  path: projects/website-monitor/notification-artifacts/
                  retention-days: 30
